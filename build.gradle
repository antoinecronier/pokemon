apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.5
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

sourceSets {
        main {
            java.srcDirs = ['src/main']
        }
    }

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task jacocoTestReport(type:JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src")
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData = files("${buildDir}/jacoco/testDebug.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

/**
 * Checkstyle tasks
 * Usage:
 * - place this file under root dir of your project at /gradle  directory
 * - apply script from your gradle file:
 * apply from : "{rootDir}/gradle/checkstyle.gradle"
 *
 * To configure checkstyle use configs at:
 * "{rootDir}/config/checkstyle/checkstyle.xml" - for main projects
 * "{rootDir}/config/checkstyle/checkstyle-test.xml" - for tests
 * "{rootDir}/config/checkstyle/suppresions.xml" - for style suppressions
 *
 * Xml and HTML reports are stored:
 * "{project.buildDir}/reports/checkstyle/"
 * HTML styling is done by XSLT stylesheet:
 * "{rootDir}/config/checkstyle/checkstyle-noframes-sorted.xsl"
*/

apply plugin: 'checkstyle'

task checkstyleMain (type: Checkstyle, overwrite: true) {
    ignoreFailures = true
    showViolations = false
    source 'src/main', 'src/release'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/main.xml"
    }
    classpath = files()
    configFile = file("${rootProject.rootDir}/checkstyle_rules.xml")
}

task checkstyleTest (type: Checkstyle, overwrite: true){
    ignoreFailures = true
    showViolations = false
    source 'src/test'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/test.xml"
    }
    classpath = files()
    configFile = file("${rootProject.rootDir}/checkstyle_rules.xml")
}


task checkstyleReport << {
    checkType = project.ext.get("checkType")
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$project.buildDir/reports/checkstyle/${checkType}.xml",
            style:"C:/ContinuousIntegration/checkstyle-6.13/checkstyle-noframes-sorted.xsl",
            out:"$project.buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

task checkstyle(dependsOn:['checkstyleMain', 'checkstyleTest']){
    description 'Runs Checkstyle inspection against Android sourcesets.'
    group = 'Code Quality'
}

gradle.taskGraph.afterTask {Task task, TaskState state ->
    if(state.failure) {
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    project.ext.set("checkType", matcher.group(1).toLowerCase())
                }
            }
            checkstyleReport.execute()
        }
    }
}


/**
 * FindBugs task
 * Usage:
 * - place this file under root dir of your project at /gradle  directory
 * - apply script from your gradle file:
 * apply from : "{rootDir}/gradle/findbugs.gradle"
 *
 * To configure findbugs exclude filter use configs at:
 * "{rootDir}/config/findbugs/exclude.xml"
 *
 * Xml and HTML reports are stored:
 * "{project.buildDir}/reports/findbugs/"
 * HTML styling is done by XSLT stylesheet:
 * "{rootDir}/config/findbugs/findbugs-default.xsl"
 */


apply plugin: 'findbugs'

task findbugsMain (type: FindBugs, overwrite: true) {

    description 'Run findbugs'
    ignoreFailures = true
    classes = fileTree('build/classes/main/main/')
    source = fileTree('src/main/')
    classpath = files(project.configurations.compile.asPath)

    effort = 'max'

    reports {
        xml.enabled = true
        html.enabled = false
    }
}


/**
 * PMD task
 * Usage:
 * - place this file under root dir of your project at /gradle  directory
 * - apply script from your gradle file:
 * apply from : "{rootDir}/gradle/pmd.gradle"
 *
 * To configure pmd ruleset use configs at:
 * "{rootDir}/config/pmd/pmd-ruleset.xml"
 *
 * Xml and HTML reports are stored:
 * "{project.buildDir}/reports/pmd/"
 */

apply plugin: 'pmd'

task pmdMain(type: Pmd, overwrite: true) {
    ignoreFailures = true
    description 'Runs PMD inspection against Android sourcesets.'
    group = 'Code Quality'
    ruleSetFiles = files("${rootProject.rootDir}/pmd_rules.xml")
    source = fileTree('src/')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// add CPD to check
check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml',
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/core") {
      include(name: '**/*.java')
    }
  }
}